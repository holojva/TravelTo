import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import requests
from flask import Flask, request, jsonify

TOKEN = 'bot-token-i-wont-share'
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

REVIEWS = [
    {"id": 1, "location": "–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è", "review": "–ú–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, —Ç–∞–º –Ω–µ—Ö–æ—Ä–æ—à–æ. –û–¥–Ω–∏ –±–∞–≥–µ—Ç—ã.", "rating": 3},
    {"id": 2, "location": "–ö–æ–ª–∏–∑–µ–π", "review": "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ–µ –º–µ—Å—Ç–æ! –û—â—É—â–∞–µ—à—å –¥—É—Ö –∏—Å—Ç–æ—Ä–∏–∏.", "rating": 5},
    {"id": 3, "location": "–°—Ç–∞—Ç—É—è –°–≤–æ–±–æ–¥—ã", "review": "–û–∂–∏–¥–∞–ª –±–æ–ª—å—à–µ–≥–æ. –û—á–µ—Ä–µ–¥–∏ –æ–≥—Ä–æ–º–Ω—ã–µ.", "rating": 2},
    {"id": 4, "location": "–ü–∏—Ä–∞–º–∏–¥—ã –ì–∏–∑—ã", "review": "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ–µ –∑—Ä–µ–ª–∏—â–µ! –û—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –∑–∞–∫–∞—Ç–µ.", "rating": 5},
    {"id": 5, "location": "–¢–∞–¥–∂-–ú–∞—Ö–∞–ª", "review": "–ö—Ä–∞—Å–∏–≤–æ, –Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–æ–≤.", "rating": 4},
    {"id": 6, "location": "–°–∏–¥–∏-–ë—É-–°–∞–∏–¥", "review": "–ö–∞–∫ –±—É–¥—Ç–æ –ø–æ–ø–∞–ª –≤ —Å–∫–∞–∑–∫—É! –ì–æ–ª—É–±—ã–µ –¥–æ–º–∞ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ.", "rating": 5},
    {"id": 7, "location": "–ë—É—Ä–¥–∂-–•–∞–ª–∏—Ñ–∞", "review": "–í—ã—Å–æ—Ç–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç, –Ω–æ –±–∏–ª–µ—Ç—ã —Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–∏–µ.", "rating": 3},
    {"id": 8, "location": "–û–∑–µ—Ä–æ –ë–∞–π–∫–∞–ª", "review": "–°–∞–º–æ–µ —á–∏—Å—Ç–æ–µ –æ–∑–µ—Ä–æ –≤ –º–∏—Ä–µ. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ –ø–æ—Å–µ—â–µ–Ω–∏—é!", "rating": 5},
    {"id": 9, "location": "–î–∏—Å–Ω–µ–π–ª–µ–Ω–¥ –≤ –ü–∞—Ä–∏–∂–µ", "review": "–î–µ—Ç–∏ –±—ã–ª–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ, –Ω–æ —Ü–µ–Ω—ã –∫—É—Å–∞—é—Ç—Å—è.", "rating": 4},
    {"id": 10, "location": "–ê–Ω–≥–∫–æ—Ä-–í–∞—Ç", "review": "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ, –Ω–æ –æ—á–µ–Ω—å –∂–∞—Ä–∫–æ –∏ –≤–ª–∞–∂–Ω–æ.", "rating": 4},
]

# Location cards
LOCATIONS = [
    {
        "name": "–í–µ–ª–∏–∫–∞—è –ö–∏—Ç–∞–π—Å–∫–∞—è –°—Ç–µ–Ω–∞",
        "description": "–û–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –±–æ–ª—å—à–∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ö–∏—Ç–∞—è –∏ –ú–∏—Ä–∞. –ï–µ –≤–∏–¥–Ω–æ –∏–∑ –∫–æ—Å–º–æ—Å–∞",
        "coordinates": "40.4319¬∞ N, 116.5704¬∞ E"
    },
    {
        "name": "–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è",
        "description": "–°–∏–º–≤–æ–ª –ü–∞—Ä–∏–∂–∞ –∏ –≤—Å–µ–π –§—Ä–∞–Ω—Ü–∏–∏. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∞ –≤ 1889 –≥–æ–¥—É.",
        "coordinates": "48.8584¬∞ N, 2.2945¬∞ E"
    },
    {
        "name": "–ö–æ–ª–∏–∑–µ–π",
        "description": "–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä –≤ –†–∏–º–µ, –≥–¥–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä—Å–∫–∏–µ –±–æ–∏. –°–∏–º–≤–æ–ª –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏.",
        "coordinates": "41.8902¬∞ N, 12.4924¬∞ E"
    },
    {
        "name": "–¢–∞–¥–∂-–ú–∞—Ö–∞–ª",
        "description": "–ú–∞–≤–∑–æ–ª–µ–π-–º–µ—á–µ—Ç—å –≤ –ò–Ω–¥–∏–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∏–∑ –±–µ–ª–æ–≥–æ –º—Ä–∞–º–æ—Ä–∞. –®–µ–¥–µ–≤—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.",
        "coordinates": "27.1751¬∞ N, 78.0421¬∞ E"
    },
    {
        "name": "–ú–∞—á—É-–ü–∏–∫—á—É",
        "description": "–î—Ä–µ–≤–Ω–∏–π –≥–æ—Ä–æ–¥ –∏–Ω–∫–æ–≤ –≤ –ü–µ—Ä—É, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã–π –≤—ã—Å–æ–∫–æ –≤ –≥–æ—Ä–∞—Ö.",
        "coordinates": "13.1631¬∞ S, 72.5450¬∞ W"
    },
]

user_states = {}
MODERATION_SERVER = "https://travelto.com/api" #–ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ


def format_review(review):
    return f"""–¢–æ—á–∫–∞: {review['location']}
ID: {review['id']}
–û—Ç–∑—ã–≤: "{review['review']}"
–û—Ü–µ–Ω–∫–∞: {review['rating']}"""


def format_location(location):
    return f"""–ú–µ—Å—Ç–æ: {location['name']}
–û–ø–∏—Å–∞–Ω–∏–µ: {location['description']}
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {location['coordinates']}"""


def send_next_item(chat_id):
    user_state = user_states.get(chat_id, {'review_index': 0, 'location_index': 0, 'last_sent': None})

    if user_state['last_sent'] != 'review' and user_state['review_index'] < len(REVIEWS):
        review = REVIEWS[user_state['review_index']]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëç –ü—Ä–∏–Ω—è—Ç—å (+)", callback_data=f"accept_{review['id']}"),
            InlineKeyboardButton("üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å (-)", callback_data=f"reject_{review['id']}")
        )
        bot.send_message(chat_id, format_review(review), reply_markup=keyboard)
        user_state['review_index'] += 1
        user_state['last_sent'] = 'review'
    elif user_state['location_index'] < len(LOCATIONS):
        location = LOCATIONS[user_state['location_index']]
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëç –ü—Ä–∏–Ω—è—Ç—å (+)", callback_data=f"accept_{location['name']}"),
            InlineKeyboardButton("üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å (-)", callback_data=f"reject_{location['name']}")
        )
        bot.send_message(chat_id, format_location(location))
        user_state['location_index'] += 1
        user_state['last_sent'] = 'location'
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–î–∞", callback_data="restart_yes"))
        bot.send_message(chat_id, "–í—Å–µ –º–µ—Å—Ç–∞ –æ—Ç–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é?", reply_markup=keyboard)
        return

    user_states[chat_id] = user_state


@app.route('/add_review', methods=['POST'])
def add_review():
    data = request.json
    new_id = max([r['id'] for r in REVIEWS], default=0) + 1
    REVIEWS.append({
        "id": new_id,
        "location": data.get('location', ''),
        "review": data.get('review', ''),
        "rating": data.get('rating', 0)
    })
    return jsonify({"status": "success", "id": new_id})


@app.route('/add_location', methods=['POST'])
def add_location():
    data = request.json
    LOCATIONS.append({
        "name": data.get('name', ''),
        "description": data.get('description', ''),
        "coordinates": data.get('coordinates', '')
    })
    return jsonify({"status": "success"})


def send_to_moderation_server(data):
    try:
        requests.post(f"{MODERATION_SERVER}/moderation_result", json=data)
    except:
        pass


@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_states[chat_id] = {'review_index': 0, 'location_index': 0, 'last_sent': None}
    bot.send_message(chat_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤!")
    send_next_item(chat_id)


@bot.callback_query_handler(func=lambda call: True)
def handle_query(call):
    chat_id = call.message.chat.id
    data = call.data

    if data.startswith("accept_"):
        review_id = int(data.split('_')[1])
        review = next((r for r in REVIEWS if r['id'] == review_id), None)
        if review:
            send_to_moderation_server({
                "action": "accept",
                "review_id": review_id,
                "review_data": review
            })
        bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç.")
        bot.send_message(chat_id, "–û—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç.")
        send_next_item(chat_id)
    elif data.startswith("reject_"):
        review_id = int(data.split('_')[1])
        review = next((r for r in REVIEWS if r['id'] == review_id), None)
        if review:
            send_to_moderation_server({
                "action": "reject",
                "review_id": review_id,
                "review_data": review
            })
        bot.answer_callback_query(call.id, "–û—Ç–∑—ã–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç.")
        bot.send_message(chat_id, "–û—Ç–∑—ã–≤ –Ω–µ –ø—Ä–∏–Ω—è—Ç.")
        send_next_item(chat_id)
    elif data == "restart_yes":
        user_states[chat_id] = {'review_index': 0, 'location_index': 0, 'last_sent': None}
        bot.send_message(chat_id, "–î–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        send_next_item(chat_id)


if __name__ == '__main__':
    import threading

    threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000}).start()
    bot.infinity_polling()